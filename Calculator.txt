//calculator.h
#ifndef CALCULATOR_H
#define CALCULATOR_H

#include <QWidget>
#include <QLineEdit>

#include <mybutton.h>


class Calculator : public QWidget
{
    Q_OBJECT

public:
    Calculator(QWidget *parent = nullptr);
    ~Calculator();
private slots:
    void digitClicked();
    void unaryOperatorClicked();
    void additiveOperatorClicked();
    void multiplicativeOperatorClicked();
    void equalClicked();
    void pointClicked();
    void changeSignClicked();
    void backspaceClicked();
    void clear();
    void clearAll();
private:
    //комментарии писал для себя, чтобы не забыть какая переменная за что отвечает
    template<typename PointerToMemberFunction>
    MyButton *createButton(const QString &text, const PointerToMemberFunction &member);

    void abortOperation();

    double m_sumInMemory; // содержит значение, хранящееся в памяти калькулятора
    double m_sumSoFar; // хранит накопленную сумму
    double m_factorSoFar; // хранит временную величину при выполнении умножения и деления

    QString m_pendingAdditiveOperator; // хранит последний аддитивный оператор, нажатый пользователем
    QString m_pendingMultiplicativeOperator; // хранит последний мультипликативный оператор, нажатый пользователем

    QLineEdit* m_display;

    MyButton* m_digitButtons[10];

    bool waitingForOperand;

    bool calculate(double operand, const QString& operation);



};
#endif // CALCULATOR_H

//mybutton.h
#ifndef MYBUTTON_H
#define MYBUTTON_H

#include <QToolButton>

class MyButton : public QToolButton
{
    Q_OBJECT

public:
    explicit MyButton(const QString& text, QWidget *parent = nullptr);

    QSize sizeHint() const override;
};

#endif // MYBUTTON_H

//calculator.cpp
#include "calculator.h"

#include <QGridLayout>

#include <mybutton.h>

#include <QDebug>

#include <QtMath>

Calculator::Calculator(QWidget *parent)
    : QWidget(parent), m_sumInMemory(0.0), m_sumSoFar(0.0)
    , m_factorSoFar(0.0), waitingForOperand(true)
{

    m_display = new QLineEdit("0");
    m_display->setReadOnly(true);
    m_display->setAlignment(Qt::AlignRight);
    m_display->setMaxLength(15);

    QFont font = m_display->font();
    font.setPointSize(font.pointSize() + 8);
    m_display->setFont(font);

    for (int i = 0; i < 10; ++i)
        m_digitButtons[i] = createButton(QString::number(i), &Calculator::digitClicked);

    MyButton *pointButton = createButton(tr("."), &Calculator::pointClicked);
    MyButton *changeSignButton = createButton(tr("\302\261"), &Calculator::changeSignClicked);

    MyButton *backspaceButton = createButton(tr("Backspace"), &Calculator::backspaceClicked);
    MyButton *clearButton = createButton(tr("Clear"), &Calculator::clear);
    MyButton *clearAllButton = createButton(tr("Clear All"), &Calculator::clearAll);

    MyButton *divisionButton = createButton(tr("/"), &Calculator::multiplicativeOperatorClicked);
    MyButton *timesButton = createButton(tr("*"), &Calculator::multiplicativeOperatorClicked);
    MyButton *minusButton = createButton(tr("-"), &Calculator::additiveOperatorClicked);
    MyButton *plusButton = createButton(tr("+"), &Calculator::additiveOperatorClicked);

    MyButton *squareRootButton = createButton(tr("Sqrt"), &Calculator::unaryOperatorClicked);
    MyButton *powerButton = createButton(tr("x\302\262"), &Calculator::unaryOperatorClicked);
    MyButton *reciprocalButton = createButton(tr("1/x"), &Calculator::unaryOperatorClicked);
    MyButton *equalButton = createButton(tr("="), &Calculator::equalClicked);

    QGridLayout* mainLayout = new QGridLayout;

    mainLayout->setSizeConstraint(QLayout::SetFixedSize);
    mainLayout->addWidget(m_display, 0, 0, 1, 6);
    mainLayout->addWidget(backspaceButton, 1, 0, 1, 2);
    mainLayout->addWidget(clearButton, 1, 2, 1, 2);
    mainLayout->addWidget(clearAllButton, 1, 4, 1, 1);

    for (int i = 1; i < 10; ++i) {
        int row = ((9 - i) / 3) + 2;
        int column = ((i - 1) % 3);
        mainLayout->addWidget(m_digitButtons[i], row, column);
    }

    mainLayout->addWidget(m_digitButtons[0], 5, 0);
    mainLayout->addWidget(pointButton, 5, 1);
    mainLayout->addWidget(changeSignButton, 5, 2);

    mainLayout->addWidget(divisionButton, 2, 3);
    mainLayout->addWidget(timesButton, 3, 3);
    mainLayout->addWidget(minusButton, 4, 3);
    mainLayout->addWidget(plusButton, 5, 3);

    mainLayout->addWidget(squareRootButton, 2, 4);
    mainLayout->addWidget(powerButton, 3, 4);
    mainLayout->addWidget(reciprocalButton, 4, 4);
    mainLayout->addWidget(equalButton, 5, 4);

    setLayout(mainLayout);

    setWindowTitle(tr("Calculator"));
}

template<typename PointerToMemberFunction>
MyButton *Calculator::createButton(const QString &text, const PointerToMemberFunction &member)
{
    MyButton *btn = new MyButton(text);
    connect(btn, &MyButton::clicked, this, member);
    return btn;
}

void Calculator::digitClicked() {
    MyButton* btn = (MyButton*) sender();
    int digit = btn->text().toUInt();

    if (m_display->text() == "0" && digit == 0.0)
        return;

    if (waitingForOperand) {
        m_display->clear();
        waitingForOperand = false;
    }

    m_display->setText(m_display->text() + QString::number(digit));

}

void Calculator::unaryOperatorClicked() {
    MyButton* btn = (MyButton*) sender();
    QString operation = btn->text();

    double operand = m_display->text().toDouble();
    double result = 0.0;


    if (operation == tr("Sqrt")) {
        if (operand < 0.0) {
            abortOperation();
            return;
        }
        result = std::sqrt(operand);
    } else if (operation == tr("x\302\262")) {
        result = std::pow(operand, 2.0);
    } else if (operation == tr("1/x")) {
        if (operand == 0.0) {
            abortOperation();
            return;
        }
        result = 1.0 / operand;
    }
    m_display->setText(QString::number(result));
    waitingForOperand = true;
}

void Calculator::additiveOperatorClicked() {
    MyButton* btn = (MyButton*) sender();
    QString operation = btn->text();

    double operand = m_display->text().toDouble();

    if (!m_pendingMultiplicativeOperator.isEmpty()) {
        if (!calculate(operand, m_pendingMultiplicativeOperator)) {
            abortOperation();
            return;
        }
        m_display->setText(QString::number(m_factorSoFar));
        operand = m_factorSoFar;
        m_factorSoFar = 0.0;
        m_pendingMultiplicativeOperator.clear();
    }

    if (!m_pendingAdditiveOperator.isEmpty()) {
       if (!calculate(operand, m_pendingAdditiveOperator)) {
           abortOperation();
           return;
       }
       m_display->setText(QString::number(m_sumSoFar));
   } else {
       m_sumSoFar = operand;
   }
    m_pendingAdditiveOperator = operation;
   waitingForOperand = true;
}

void Calculator::multiplicativeOperatorClicked() {
    MyButton* btn = (MyButton*) sender();
    QString operation = btn->text();

    double operand = m_display->text().toDouble();

    if (!m_pendingMultiplicativeOperator.isEmpty()) {
        if (!calculate(operand, m_pendingMultiplicativeOperator)) {
            abortOperation();
            return;
        }
        m_display->setText(QString::number(m_factorSoFar));
    } else {
        m_factorSoFar = operand;
    }

    m_pendingMultiplicativeOperator = operation;
    waitingForOperand = true;
}

void Calculator::equalClicked() {
    double operand = m_display->text().toDouble();

    if (!m_pendingMultiplicativeOperator.isEmpty()) {
        if (!calculate(operand, m_pendingMultiplicativeOperator)) {
            abortOperation();
            return;
        }
        operand = m_factorSoFar;
        m_factorSoFar = 0.0;
        m_pendingMultiplicativeOperator.clear();
    }
    if (!m_pendingAdditiveOperator.isEmpty()) {
        if (!calculate(operand, m_pendingAdditiveOperator)) {
            abortOperation();
            return;
        }
        m_pendingAdditiveOperator.clear();
    } else {
        m_sumSoFar = operand;
    }

    m_display->setText(QString::number(m_sumSoFar));
    m_sumSoFar = 0.0;

    waitingForOperand = true;
}

void Calculator::pointClicked() {
    if (waitingForOperand)
        m_display->setText("0");
    if (!m_display->text().contains('.'))
        m_display->setText(m_display->text() + tr("."));
    waitingForOperand = false;
}
Calculator::~Calculator()
{
}

void Calculator::changeSignClicked() {
   QString text = m_display->text();
   double value = text.toDouble();
   if (value > 0.0) {
       text.prepend(tr("-"));
   } else if (value < 0.0) {
       text.remove(0, 1);
   }
   m_display->setText(text);
}

void Calculator::backspaceClicked() {
    if (waitingForOperand)
        return;

    QString text = m_display->text();
    text.chop(1);

    if (text.isEmpty()) {
        text = '0';
        waitingForOperand = true;
    }

    m_display->setText(text);

}
void Calculator::clear() {
    if (waitingForOperand)
        return;
    m_display->setText("0");
    waitingForOperand = true;
}

void Calculator::clearAll()
{
    m_sumSoFar = 0.0;
    m_factorSoFar = 0.0;
    m_pendingAdditiveOperator.clear();
    m_pendingMultiplicativeOperator.clear();
    m_display->setText("0");
    waitingForOperand = true;
}


void Calculator::abortOperation() {
    clearAll();
    m_display->setText("###");
}

bool Calculator::calculate(double rightOperand, const QString &pendingOperator)
{
    if (pendingOperator == tr("+")) {
        m_sumSoFar += rightOperand;
    } else if (pendingOperator == tr("-")) {
        m_sumSoFar -= rightOperand;
    } else if (pendingOperator == tr("*")) {
        m_factorSoFar *= rightOperand;
    } else if (pendingOperator == tr("/")) {
        if (rightOperand == 0.0)
            return false;
        m_factorSoFar /= rightOperand;
    }
    return true;
}

// mybutton.h
#include "mybutton.h"

MyButton::MyButton(const QString &text, QWidget *parent) : QToolButton(parent)
{
    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Preferred);
    setText(text);
}

QSize MyButton::sizeHint() const
{
    QSize size = QToolButton::sizeHint();
    size.rheight() += 20;
    size.rwidth() = qMax(size.width(), size.height());
    return size;
}